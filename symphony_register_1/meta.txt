kind = sequential
title = "Symphony register"
size = [-48, -48, 49, 49]
background = 6
copy_solution_to_level = ["symphony_register_2"]
save_solution_as_custom = "Symphony/reg"
input_labels = [["Load Id 0"], ["Load Id 1"], ["Store Id"], ["Store value"]]
output_labels = ["Load 0", "Load 1"]
add_components = [com_probe_memory_word: -1, com_static_value: -1]
dialogue = [
    (alien_centered, `In this level you build the custom component for registers you will be using in your next architecture, called [color=#e49f44]Symphony[/color].`),
    (info, `Build a register that can load and output to two independent pins.
Use the 'Static value' component to store the Id of the register. Set it to 1 for this level.
If the Load Id 0 is equal to the register's Id, output to the first output.
If the Load Id 1 is equal to the register's Id, output to the second output.
If the Store Id is equal to the register's Id, then save the Store value to the register.`),
    (info, `This register should store 16 bits instead of 8. Use the new width button on the left to change the width (right click on the button, to change it to 16)

    Also, place a "memory probe" component and link it to your 16 bit memory. This will allow the value to be seen on our custom component after it is done.`),
]