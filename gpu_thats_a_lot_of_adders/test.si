
def fixed_to_str(a: U16) String {
    var result = <Int>((a & 0x7ff0) >> 4)
    result *= 10000
    result += ((<Int>a) & 0xf) * 625

    if (a >> 15) > 0 {
        result -= 20480000
    }

    var fraction = result % 10000
    if fraction < 0 {
        fraction = -fraction
    }

    return `{result / 10000}.{(fraction / 1000) % 10}{(fraction / 100) % 10}{(fraction / 10) % 10}{(fraction) % 10}`
}

def draw_matrix_column(colIndex: Int, col: Int, id: String) {
    ui_set_text(`{id}0{colIndex}`, fixed_to_str(<U16> (col & 0xffff)))
    ui_set_text(`{id}1{colIndex}`, fixed_to_str(<U16> ((col >> 16) & 0xffff)))
    ui_set_text(`{id}2{colIndex}`, fixed_to_str(<U16> ((col >> 32) & 0xffff)))
    ui_set_text(`{id}3{colIndex}`, fixed_to_str(<U16> ((col >> 48) & 0xffff)))
}

def add_column(a: Int, b: Int) Int {
    let ax = <Int> (<S16>(a & 0xffff))
    let ay = <Int> (<S16>((a >> 16) & 0xffff))
    let az = <Int> (<S16>((a >> 32) & 0xffff))
    let aw = <Int> (<S16>((a >> 48) & 0xffff))

    let bx = <Int> (<S16>(b & 0xffff))
    let by = <Int> (<S16>((b >> 16) & 0xffff))
    let bz = <Int> (<S16>((b >> 32) & 0xffff))
    let bw = <Int> (<S16>((b >> 48) & 0xffff))

    var x = ax + bx
    var y = ay + by
    var z = az + bz
    var w = aw + bw

    if x > 32767 {
        x = 32767
    }
    if x < -32768 {
        x = -32768
    }

    if y > 32767 {
        y = 32767
    }
    if y < -32768 {
        y = -32768
    }

    if z > 32767 {
        z = 32767
    }
    if z < -32768 {
        z = -32768
    }

    if w > 32767 {
        w = 32767
    }
    if w < -32768 {
        w = -32768
    }

    return <Int>((<U64>(<U16> x)) | ((<U64>(<U16> y)) << 16) | ((<U64>(<U16> z)) << 32) | ((<U64>(<U16> w))<< 48))
}

def permute(x: Int) Int {
    var p = x
    p ^= p << 7
    p ^= p >> 9
    p ^= p << 8
    p ^= p << 15
    p ^= p >> 17
    p ^= p << 16
    p ^= p << 31
    p ^= p >> 33
    p ^= p << 32
    p ^= p << 63
    p ^= p >> 65
    p ^= p << 64
    return p
}

def get_input($scratch_space: [Int], tick: Int, $inputs: [Int]) {

    var x = tick
    x = permute(x)
    inputs[0] = x

    x = permute(x)
    inputs[1] = x

    x = permute(x)
    inputs[2] = x

    x = permute(x)
    inputs[3] = x

    x = permute(x)
    inputs[4] = x

    x = permute(x)
    inputs[5] = x

    x = permute(x)
    inputs[6] = x

    x = permute(x)
    inputs[7] = x

    if tick <= 15 {
        let m0 = add_column(inputs[0], inputs[4])
        let m1 = add_column(inputs[1], inputs[5])
        let m2 = add_column(inputs[2], inputs[6])
        let m3 = add_column(inputs[3], inputs[7])

        draw_matrix_column(0, inputs[0], "a")
        draw_matrix_column(1, inputs[1], "a")
        draw_matrix_column(2, inputs[2], "a")
        draw_matrix_column(3, inputs[3], "a")

        draw_matrix_column(0, inputs[4], "b")
        draw_matrix_column(1, inputs[5], "b")
        draw_matrix_column(2, inputs[6], "b")
        draw_matrix_column(3, inputs[7], "b")

        draw_matrix_column(0, m0, "m")
        draw_matrix_column(1, m1, "m")
        draw_matrix_column(2, m2, "m")
        draw_matrix_column(3, m3, "m")
    }
    if tick == 16 {
        draw_matrix_column(0, 0, "a")
        draw_matrix_column(1, 0, "a")
        draw_matrix_column(2, 0, "a")
        draw_matrix_column(3, 0, "a")

        draw_matrix_column(0, 0, "b")
        draw_matrix_column(1, 0, "b")
        draw_matrix_column(2, 0, "b")
        draw_matrix_column(3, 0, "b")

        draw_matrix_column(0, 0, "m")
        draw_matrix_column(1, 0, "m")
        draw_matrix_column(2, 0, "m")
        draw_matrix_column(3, 0, "m")
    }
}

def check_output($scratch_space: [Int], tick: Int, inputs: [Int], outputs: [Int]) TestResult {
    
    let m0 = add_column(inputs[0], inputs[4])
    let m1 = add_column(inputs[1], inputs[5])
    let m2 = add_column(inputs[2], inputs[6])
    let m3 = add_column(inputs[3], inputs[7])

    let providedm0 = outputs[0]
    let providedm1 = outputs[1]
    let providedm2 = outputs[2]
    let providedm3 = outputs[3]

    if providedm0 == m0 && providedm1 == m1 && providedm2 == m2 && providedm3 == m3 {
        if tick == 0xffff {
            return win
        }
    } else {
        set_error(`Expected [{m0}, {m1}, {m2}, {m3}], but got [{providedm0}, {providedm1}, {providedm2}, {providedm3}]`)
        return fail
    }
}
