pub def panic(text: String) {
    print(text)
    let error = 0
    let panicked = 1 / error
}

pub type List [[U8]]

pub def new_list() List {
    return [
        [<U8> 0, <U8> 0, <U8> 0], // 2 Length bytes, Size of objects
        array(8, <U8> 0) // objects data
    ]
}

pub dot obj_size(list: List) Int {
    return list[0][2]
}

pub dot count(list: List) Int {
    return <Int>((<[U16]>list[0])[0])
}

pub dot capacity(list: List) Int {
    return list.count() >> list.obj_size()
}

def enlarge_list($list: List) {
    list[1] += array(list[1].len(), <U8> 0)
}

def enlarge_list_if_needed($list: List) {
    let index = list.count()
    if list.capacity() == index {
        enlarge_list($list)
    }
}

def delta_count($list: List, delta: Int) {
    let length = list.count()
    let metadata = <[U16]>list[0]
    metadata[0] = length + delta
}

def enforce_type($list: List, type: U8) {
    if list.obj_size() == 0 {
        $list[0][2] = type
    }
    if list.obj_size() != type {
        panic("Invalid value type - this list was already initialized with other values")
    }
}

pub dot add($list: List, value: U8) {
    enforce_type($list, 1)
    enlarge_list_if_needed($list)
    let index = list.count()
    list[1][index] = value
    delta_count($list, 1)
}

pub dot add($list: List, value: U16) {
    enforce_type($list, 2)
    enlarge_list_if_needed($list)
    let index = list.count()
    (<[U16]>list[1])[index] = value
    delta_count($list, 1)
}

pub dot add($list: List, value: U32) {
    enforce_type($list, 4)
    enlarge_list_if_needed($list)
    let index = list.count()
    (<[U32]>list[1])[index] = value
    delta_count($list, 1)
}

pub dot add($list: List, value: U64) {
    enforce_type($list, 8)
    enlarge_list_if_needed($list)
    let index = list.count()
    (<[U64]>list[1])[index] = value
    delta_count($list, 1)
}

pub dot add($list: List, value: S8) {
    enforce_type($list, 1)
    enlarge_list_if_needed($list)
    let index = list.count()
    (<[S8]>list[1])[index] = value
    delta_count($list, 1)
}

pub dot add($list: List, value: S16) {
    enforce_type($list, 2)
    enlarge_list_if_needed($list)
    let index = list.count()
    (<[S16]>list[1])[index] = value
    delta_count($list, 1)
}

pub dot add($list: List, value: S32) {
    enforce_type($list, 4)
    enlarge_list_if_needed($list)
    let index = list.count()
    (<[S32]>list[1])[index] = value
    delta_count($list, 1)
}

pub dot add($list: List, value: S64) {
    enforce_type($list, 8)
    enlarge_list_if_needed($list)
    let index = list.count()
    (<[S64]>list[1])[index] = value
    delta_count($list, 1)
}

pub dot get_u8(list: List, index: Int) U8 {
    enforce_type($list, 1)
    return list[1][index]
}

pub dot get_s8(list: List, index: Int) S8 {
    enforce_type($list, 1)
    return (<[S8]>list[1])[index]
}

pub dot get_u16(list: List, index: Int) U16 {
    enforce_type($list, 1)
    return (<[U16]>list[1])[index]
}

pub dot get_s16(list: List, index: Int) S16 {
    enforce_type($list, 1)
    return (<[S16]>list[1])[index]
}

pub dot get_u32(list: List, index: Int) U32 {
    enforce_type($list, 1)
    return (<[U32]>list[1])[index]
}

pub dot get_s32(list: List, index: Int) S32 {
    enforce_type($list, 1)
    return (<[S32]>list[1])[index]
}

pub dot get_u64(list: List, index: Int) U64 {
    enforce_type($list, 1)
    return (<[U64]>list[1])[index]
}

pub dot get_s64(list: List, index: Int) S64 {
    enforce_type($list, 1)
    return (<[S64]>list[1])[index]
}

pub dot findIndex($list: List, value: U8) {
    enforce_type($list, 1)
    let count = list.count()
    var i = 0
    let l = list[1]
    while i < count {
        if l[i] == value {
            return i
        }
        i += 1
    }
    return -1
}

pub dot findIndex($list: List, value: S8) {
    enforce_type($list, 1)
    let count = list.count()
    var i = 0
    let l = <[S8]>list[1]
    while i < count {
        if l[i] == value {
            return i
        }
        i += 1
    }
    return -1
}

pub dot findIndex($list: List, value: U16) {
    enforce_type($list, 1)
    let count = list.count()
    var i = 0
    let l = <[U16]>list[1]
    while i < count {
        if l[i] == value {
            return i
        }
        i += 1
    }
    return -1
}

pub dot findIndex($list: List, value: S16) {
    enforce_type($list, 1)
    let count = list.count()
    var i = 0
    let l = <[S16]>list[1]
    while i < count {
        if l[i] == value {
            return i
        }
        i += 1
    }
    return -1
}

pub dot findIndex($list: List, value: U32) {
    enforce_type($list, 1)
    let count = list.count()
    var i = 0
    let l = <[U32]>list[1]
    while i < count {
        if l[i] == value {
            return i
        }
        i += 1
    }
    return -1
}

pub dot findIndex($list: List, value: S32) {
    enforce_type($list, 1)
    let count = list.count()
    var i = 0
    let l = <[S32]>list[1]
    while i < count {
        if l[i] == value {
            return i
        }
        i += 1
    }
    return -1
}

pub dot findIndex($list: List, value: U64) {
    enforce_type($list, 1)
    let count = list.count()
    var i = 0
    let l = <[U64]>list[1]
    while i < count {
        if l[i] == value {
            return i
        }
        i += 1
    }
    return -1
}

pub dot findIndex($list: List, value: S64) {
    enforce_type($list, 1)
    let count = list.count()
    var i = 0
    let l = <[S64]>list[1]
    while i < count {
        if l[i] == value {
            return i
        }
        i += 1
    }
    return -1
}

pub dot remove_at($list: List, index: Int) {
    let size = list.obj_size()
    if size == 0 {
        return
    }
    let count = list.count()
    var i = index + 1
    switch size
        1 {
            while i < count {
                list[1][i - 1] = list[1][i]
                i += 1
            }
        }
        2 {
            let l = <[U16]>list[1]
            while i < count {
                l[i - 1] = l[i]
                i += 1
            }
        }
        4 {
            let l = <[U32]>list[1]
            while i < count {
                l[i - 1] = l[i]
                i += 1
            }
        }
        8 {
            let l = <[U64]>list[1]
            while i < count {
                l[i - 1] = l[i]
                i += 1
            }
        }
    delta_count($list, -1)
}

pub dot remove($list: List, value: U8) {
    let index = list.findIndex(value)
    if index < 0 {
        return
    }
    remove_at(list, index)
}

pub dot remove($list: List, value: S8) {
    let index = list.findIndex(value)
    if index < 0 {
        return
    }
    remove_at(list, index)
}

pub dot remove($list: List, value: U16) {
    let index = list.findIndex(value)
    if index < 0 {
        return
    }
    remove_at(list, index)
}

pub dot remove($list: List, value: S16) {
    let index = list.findIndex(value)
    if index < 0 {
        return
    }
    remove_at(list, index)
}

pub dot remove($list: List, value: U32) {
    let index = list.findIndex(value)
    if index < 0 {
        return
    }
    remove_at(list, index)
}

pub dot remove($list: List, value: S32) {
    let index = list.findIndex(value)
    if index < 0 {
        return
    }
    remove_at(list, index)
}

pub dot remove($list: List, value: U64) {
    let index = list.findIndex(value)
    if index < 0 {
        return
    }
    remove_at(list, index)
}

pub dot remove($list: List, value: S64) {
    let index = list.findIndex(value)
    if index < 0 {
        return
    }
    remove_at(list, index)
}

def hash_cycle(hash: U64, value: U64) U64 {
    return (hash * <U64>16777619) ^ value
}

pub dot hashcode(value: Uint) U64 {
    var hash = <U64>2166136261
    hash = hash_cycle(hash, (<U64>value) & 0xffffffff)
    hash = hash_cycle(hash, ((<U64>value) >> 32) & 0xffffffff)
    return hash
}

pub dot hashcode(value: Sint) U64 {
    var hash = <U64>2166136261
    hash = hash_cycle(hash, (<U64>value) & 0xffffffff)
    hash = hash_cycle(hash, ((<U64>value) >> 32) & 0xffffffff)
    return hash
}

pub type HashSet [List]

def new_hashset() HashSet {
    return new_hashset(10)
}

def new_hashset(buckets: Int) HashSet {
    const map = <HashSet>array(buckets, <List>[[<U8>0]])
    var i = 0
    while i < buckets {
        map[i] = new_list()
        i += 1
    }
    return map
}

dot load_factor(map: HashSet) Int {
    var items = 0
    var i = 0
    var len = map.len()
    while i < len {
        items += map[0].count()
        i += 1
    }
    return items / len
}

dot resize_if_needed($map: HashSet) {
    let lf = map.load_factor()
    if lf < 4 {
        return
    }
    let buckets = map.len()
    let new_map = new_hashset(buckets << 1)
    var bucket_index = 0
    while bucket_index < buckets {
        let bucket = map[bucket_index]
        var i = 0
        let count = bucket.count()
        let size = bucket.obj_size()
        if size > 0 {
            while i < count {
                switch size
                    1 {
                        new_map.add(bucket.get_u8(i))
                    }
                    2 {
                        new_map.add(bucket.get_u16(i))
                    }
                    4 {
                        new_map.add(bucket.get_u32(i))
                    }
                    8 {
                        new_map.add(bucket.get_u64(i))
                    }
                i += 1
            }
        }
        bucket_index += 1
    }
    map = new_map
}

pub dot add($map: HashSet, value: U8) Bool {
    let hash = value.hashcode()
    let bucket = hash % map.len()
    if map[bucket].findIndex(value) < 0 {
        map[bucket].add(value)
        map.resize_if_needed()
        return true
    }
    return false
}

pub dot add($map: HashSet, value: U16) Bool {
    let hash = value.hashcode()
    let bucket = hash % map.len()
    if map[bucket].findIndex(value) < 0 {
        map[bucket].add(value)
        map.resize_if_needed()
        return true
    }
    return false
}

pub dot add($map: HashSet, value: U32) Bool {
    let hash = value.hashcode()
    let bucket = hash % map.len()
    if map[bucket].findIndex(value) < 0 {
        map[bucket].add(value)
        map.resize_if_needed()
        return true
    }
    return false
}

pub dot add($map: HashSet, value: U64) Bool {
    let hash = value.hashcode()
    let bucket = hash % map.len()
    if map[bucket].findIndex(value) < 0 {
        map[bucket].add(value)
        map.resize_if_needed()
        return true
    }
    return false
}

pub dot add($map: HashSet, value: S8) Bool {
    let hash = value.hashcode()
    let bucket = hash % map.len()
    if map[bucket].findIndex(value) < 0 {
        map[bucket].add(value)
        map.resize_if_needed()
        return true
    }
    return false
}

pub dot add($map: HashSet, value: S16) Bool {
    let hash = value.hashcode()
    let bucket = hash % map.len()
    if map[bucket].findIndex(value) < 0 {
        map[bucket].add(value)
        map.resize_if_needed()
        return true
    }
    return false
}

pub dot add($map: HashSet, value: S32) Bool {
    let hash = value.hashcode()
    let bucket = hash % map.len()
    if map[bucket].findIndex(value) < 0 {
        map[bucket].add(value)
        map.resize_if_needed()
        return true
    }
    return false
}

pub dot add($map: HashSet, value: S64) Bool {
    let hash = value.hashcode()
    let bucket = hash % map.len()
    if map[bucket].findIndex(value) < 0 {
        map[bucket].add(value)
        map.resize_if_needed()
        return true
    }
    return false
}

pub dot has(map: HashSet, value: U8) Bool {
    let hash = value.hashcode()
    let bucket = hash % map.len()
    return map[bucket].findIndex(value) >= 0
}

pub dot has(map: HashSet, value: S8) Bool {
    let hash = value.hashcode()
    let bucket = hash % map.len()
    return map[bucket].findIndex(value) >= 0
}

pub dot has(map: HashSet, value: U16) Bool {
    let hash = value.hashcode()
    let bucket = hash % map.len()
    return map[bucket].findIndex(value) >= 0
}

pub dot has(map: HashSet, value: S16) Bool {
    let hash = value.hashcode()
    let bucket = hash % map.len()
    return map[bucket].findIndex(value) >= 0
}

pub dot has(map: HashSet, value: U32) Bool {
    let hash = value.hashcode()
    let bucket = hash % map.len()
    return map[bucket].findIndex(value) >= 0
}

pub dot has(map: HashSet, value: S32) Bool {
    let hash = value.hashcode()
    let bucket = hash % map.len()
    return map[bucket].findIndex(value) >= 0
}

pub dot has(map: HashSet, value: U64) Bool {
    let hash = value.hashcode()
    let bucket = hash % map.len()
    return map[bucket].findIndex(value) >= 0
}

pub dot has(map: HashSet, value: S64) Bool {
    let hash = value.hashcode()
    let bucket = hash % map.len()
    return map[bucket].findIndex(value) >= 0
}

pub dot remove($map: HashSet, value: U8) Bool {
    let hash = value.hashcode()
    let bucket = hash % map.len()
    return map[bucket].remove(value)
}

pub dot remove($map: HashSet, value: S8) Bool {
    let hash = value.hashcode()
    let bucket = hash % map.len()
    return map[bucket].remove(value)
}

pub dot remove($map: HashSet, value: U16) Bool {
    let hash = value.hashcode()
    let bucket = hash % map.len()
    return map[bucket].remove(value)
}

pub dot remove($map: HashSet, value: S16) Bool {
    let hash = value.hashcode()
    let bucket = hash % map.len()
    return map[bucket].remove(value)
}

pub dot remove($map: HashSet, value: U32) Bool {
    let hash = value.hashcode()
    let bucket = hash % map.len()
    return map[bucket].remove(value)
}

pub dot remove($map: HashSet, value: S32) Bool {
    let hash = value.hashcode()
    let bucket = hash % map.len()
    return map[bucket].remove(value)
}

pub dot remove($map: HashSet, value: U64) Bool {
    let hash = value.hashcode()
    let bucket = hash % map.len()
    return map[bucket].remove(value)
}

pub dot remove($map: HashSet, value: S64) Bool {
    let hash = value.hashcode()
    let bucket = hash % map.len()
    return map[bucket].remove(value)
}