
def fixed_to_str(a: U16) String {
    var result = <Int>((a & 0x7ff0) >> 4)
    result *= 10000
    result += ((<Int>a) & 0xf) * 625

    if (a >> 15) > 0 {
        result -= 20480000
    }

    var fraction = result % 10000
    if fraction < 0 {
        fraction = -fraction
    }

    return `{result / 10000}.{(fraction / 1000) % 10}{(fraction / 100) % 10}{(fraction / 10) % 10}{(fraction) % 10}`
}

def draw_matrix_column(colIndex: Int, col: Int, id: String) {
    ui_set_text(`{id}0{colIndex}`, fixed_to_str(<U16> col))
    ui_set_text(`{id}1{colIndex}`, fixed_to_str(<U16> (col >> 16)))
    ui_set_text(`{id}2{colIndex}`, fixed_to_str(<U16> (col >> 32)))
    ui_set_text(`{id}3{colIndex}`, fixed_to_str(<U16> (col >> 48)))
}

def permute(x: Int) Int {
    var p = x
    p ^= p << 7
    p ^= p >> 9
    p ^= p << 8
    p ^= p << 15
    p ^= p >> 17
    p ^= p << 16
    p ^= p << 31
    p ^= p >> 33
    p ^= p << 32
    p ^= p << 63
    p ^= p >> 65
    p ^= p << 64
    return p
}

def transpose(m: [Int]): [Int] {
    let m00 = m[0] & 0xffff
    let m10 = (m[0] >> 16) & 0xffff
    let m20 = (m[0] >> 32) & 0xffff
    let m30 = (m[0] >> 48) & 0xffff

    let m01 = m[1] & 0xffff
    let m11 = (m[1] >> 16) & 0xffff
    let m21 = (m[1] >> 32) & 0xffff
    let m31 = (m[1] >> 48) & 0xffff

    let m02 = m[2] & 0xffff
    let m12 = (m[2] >> 16) & 0xffff
    let m22 = (m[2] >> 32) & 0xffff
    let m32 = (m[2] >> 48) & 0xffff

    let m03 = m[3] & 0xffff
    let m13 = (m[3] >> 16) & 0xffff
    let m23 = (m[3] >> 32) & 0xffff
    let m33 = (m[3] >> 48) & 0xffff

    let a = m00 | (m01 << 16) | (m02 << 32) | (m03 << 48)
    let b = m10 | (m11 << 16) | (m12 << 32) | (m13 << 48)
    let c = m20 | (m21 << 16) | (m22 << 32) | (m23 << 48)
    let d = m30 | (m31 << 16) | (m32 << 32) | (m33 << 48)
    return [a, b, c, d]
}

def get_input($scratch_space: [Int], tick: Int, $inputs: [Int]) {

    var x = tick
    x = permute(x)
    inputs[0] = x

    x = permute(x)
    inputs[1] = x

    x = permute(x)
    inputs[2] = x

    x = permute(x)
    inputs[3] = x

    if tick <= 15 {
        let t = transpose(inputs)
        let m0 = t[0]
        let m1 = t[1]
        let m2 = t[2]
        let m3 = t[3]

        draw_matrix_column(0, inputs[0], "a")
        draw_matrix_column(1, inputs[1], "a")
        draw_matrix_column(2, inputs[2], "a")
        draw_matrix_column(3, inputs[3], "a")

        draw_matrix_column(0, m0, "m")
        draw_matrix_column(1, m1, "m")
        draw_matrix_column(2, m2, "m")
        draw_matrix_column(3, m3, "m")
    }
    if tick == 16 {
        draw_matrix_column(0, 0, "a")
        draw_matrix_column(1, 0, "a")
        draw_matrix_column(2, 0, "a")
        draw_matrix_column(3, 0, "a")

        draw_matrix_column(0, 0, "m")
        draw_matrix_column(1, 0, "m")
        draw_matrix_column(2, 0, "m")
        draw_matrix_column(3, 0, "m")
    }
}

def check_output($scratch_space: [Int], tick: Int, inputs: [Int], outputs: [Int]) TestResult {
    
    let t = transpose(inputs)
    let m0 = t[0]
    let m1 = t[1]
    let m2 = t[2]
    let m3 = t[3]

    let providedm0 = outputs[0]
    let providedm1 = outputs[1]
    let providedm2 = outputs[2]
    let providedm3 = outputs[3]

    if providedm0 == m0 && providedm1 == m1 && providedm2 == m2 && providedm3 == m3 {
        if tick == 0xffff {
            return win
        }
    } else {
        set_error(`Expected [{m0}, {m1}, {m2}, {m3}], but got [{providedm0}, {providedm1}, {providedm2}, {providedm3}]`)
        return fail
    }
}
